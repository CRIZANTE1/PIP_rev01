import streamlit as st
import uuid
from datetime import datetime

def mostrar_instrucoes():
    with st.expander("üìñ Como usar este aplicativo", expanded=False):
        st.markdown("""### Guia de Uso
        
        1. **Dados da Carga**:
           * Digite o peso da carga principal em kg
           * Selecione se o equipamento √© novo ou usado
             - Novo: aplica margem de seguran√ßa de 10%
             - Usado: aplica margem de seguran√ßa de 25%
           * Informe o peso dos acess√≥rios (cintas, grilhetas, etc.)
           * O peso dos cabos ser√° calculado automaticamente (3%)
        
        2. **Dados do Guindaste**:
           * Preencha as informa√ß√µes do fabricante e modelo
           * Informe o raio m√°ximo e sua capacidade
           * Informe a extens√£o m√°xima da lan√ßa e sua capacidade
        
        3. **Resultados**:
           * O sistema calcular√° automaticamente:
             - Margem de seguran√ßa
             - Peso total a considerar
             - Peso dos cabos
             - Carga total final
           * Validar√° se o guindaste √© adequado
           * Mostrar√° as porcentagens de utiliza√ß√£o
        
        ‚ö†Ô∏è **Importante**: Se a utiliza√ß√£o ultrapassar 80%, ser√° necess√°ria aprova√ß√£o da engenharia e seguran√ßa.
        
        4. **Aba "Dados do I√ßamento"**: Preencha os dados da carga e do guindaste e clique em **Calcular**.
        5. **Aba "Informa√ß√µes e Documentos"**:
            - **Dados do Operador**: Fa√ßa o upload da CNH e clique em "Extrair Dados" para preencher as informa√ß√µes do operador.
            - **Dados do Equipamento**: Fa√ßa o upload do CRLV para preencher os dados do ve√≠culo.
            - **Preenchimento Manual**: Preencha ou corrija os demais campos necess√°rios.
            - **Documentos**: Fa√ßa o upload de todos os outros documentos solicitados.
        6. **Salvar**: Ap√≥s conferir tudo, clique em **"üíæ Salvar Todas as Informa√ß√µes"** para registrar a opera√ß√£o completa.
        """)

def gerar_id_avaliacao():
    return f"AV{datetime.now().strftime('%Y%m%d')}-{str(uuid.uuid4())[:8]}"

def handle_upload_with_id(uploader, arquivo, tipo_doc, id_avaliacao):
    if arquivo is None: return None
    extensao = arquivo.name.split('.')[-1]; novo_nome = f"{id_avaliacao}_{tipo_doc}.{extensao}"
    try:
        file_url = uploader.upload_file(arquivo, novo_nome)
        return {'success': True, 'url': file_url, 'nome': novo_nome}
    except Exception as e:
        st.error(f"Erro no upload de '{novo_nome}': {e}"); return {'success': False, 'error': str(e)}

def display_status(status_text):
    if not status_text: return
    status_lower = status_text.lower()
    if "v√°lido" in status_lower or "em dia" in status_lower:
        st.success(f"Status: {status_text}")
    elif "vencido" in status_lower:
        st.error(f"Status: {status_text}")
    else:
        st.warning(f"Status: {status_text}")
